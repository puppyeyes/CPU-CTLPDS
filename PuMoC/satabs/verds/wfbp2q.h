qmdata *bp2q(qinfo *qi,tree *bp,tree *bs,int booln,int k,int bv);;
qmdata *bp2q(qinfo *qi,tree *bp,tree *bs,int booln,int k,int bv);
qmdata *bp2q0(qinfo *qi,tree *bp,tree *bs,int booln,int k,int cur,int lv);
qmdata *bp2qEA(int e,qinfo *qi,int booln,int k,int cur,int cur1,int lv,qmdata *m0,qmdata *m1);
qmdata *bp2qFG(qinfo *qi,tree *bp,tree *bs,int booln,int k,int cur,int cur1,int lv,qmdata *ek);
qmdata *bp2qUR(qinfo *qi,tree *bp,tree *bs,int booln,int k,int cur,int cur1,int lv,int start,qmdata *ek);
qmdata *irid(qinfo *qi,tree *bp,tree *bs,int booln,int k,int bv);;
qmdata *bp2qPATH(qinfo *qi,tree *bp,int booln,int k,int cur,int lev);
qmdata *bp2qeqPATH(int a,int b,int c,int booln);
void freeqmdata(qmdata *md);
int qmdwrite(qmdata *md,qinfo *qi,FILE *g);
int qmdwrite1(qmdata *md,FILE *g,int mode);
void pnintwrite(int *ss,FILE *g);
void qmdsimp(qmdata *md,qinfo *qi);
void mdmoveup1(qmdata *md0,qmdata *md,qmdata *mdq);
int *mdintegrate(int *a1,int *a2);
int qmdlen(qmdata *md);
int qmdclauses(qmdata *md);
qmdata *tree2md(tree *t);
qmdata *mdnegate(qmdata *m0);
void mdstep1(qmdata *m0,int i,int j,int booln);
qmdata *mdcompose(int a,qmdata *m0,qmdata *m1);
tree *md2tree(qmdata *md);
tree *maketree1(char *c,int *s);
tree *maketree2(char *c,qmdata *q1,qmdata *qn);
int md2treetype(qmdata *md);
