tree *PROGaddeq_constructeq(tree *v);
void *PROGaddeq_modify(tree *t,tree *v);
void *PROGaddeq(tree *t,tree *v);
tree *PROGarraycond(tree *t,int i);
tree *PROGreplacearraybody1construct(tree *t,char *node,int k,int m,int n);
tree *PROGarray1var(char *node,int m,int n);
tree *PROGarray1varlist(char *node,int m,int n,tree *vd,tree *vnext);
void PROGreplacearraybody1(tree *t,char *node,int k,int m,int n);
void PROGreplacearraybody2(tree *t,char *node,int k,int m,int n);
tree *PROGreplacearray(tree *body,tree *vars);
tree *PROGcleanarray(tree *t);
void PROGreplacecolon(tree *t);
void PROGreplacesemiand(tree *t);
void PROGreplacechan(tree *body,tree *vars);
void PROGreplacechanbody(tree *t,char *node,int j);
void PROGreplacechaninit(tree *t,char *node,int j);
tree *PROGreplacesynnotations(tree *prog);
workspace *p2ws(tree *prog);
tree *f2p0(char *fn,tree *processes);
tree *f2p1(tree *prog);
tree *adddeadlocktr(tree *t,tree *prog);
int INFOvlist_count(tree *v);
int INFOvlist(tree *v,int p);
int INFOpuret(tree *t);
tree *INFOdeadlockfreecond(tree *t);
tree *INFOconstr_a(tree *v);
tree *constr(tree *v);
void PROGmarraycount(char *node,int *ma);
tree *PROGreplacemarray(tree *prog);
void PROGreplacemarraybody(tree *t,char *node,int j,int *ma);
void reppar(char *s) ;
tree *PROGcheck(tree *t);
tree *PROGcompose(tree *t0,tree *t1,tree *t2,tree *t3);
void PROGgetmain(char *p2,module *mm,int last);
void PROGgetmodule(char *p2,module *mm);
module *PROGtxt2modules(char *s);
tree *PROGmerge(module *mm,tree *processes);
tree *treecopyreplace(tree *spec,module *ms);
void constructt1t2(char *pname,tree *vars,tree *t1,tree *t2);
void treereplacenames(tree *prog,tree *t1,tree *t2);
int treereplacename(char *node,tree *t1,tree *t2,int fl);
void treereplacecleanname(tree *t1);
void treereplacenamearray(char *node,int i,tree *t1,tree *t2);
tree *specmergeg1(tree *s1);
tree *specmerge(tree *s1,tree *s2,int n);
void reprunning(tree *t1,int n);
void reprunning2(tree *t1,int n);
void replacepid1(tree *ll,char *ni);
void PROGaddnext_assign(tree *t) ;
void PROGaddnext(tree *t) ;
void PROGaddvc(tree *t,tree *v) ;
void PROGreplaceconstants(tree *t);
void PROGaddnextv(tree *prog,int addnext) ;
