tree *comblistdlen(tree *f(),tree *x1,tree *x2);
tree *comblist(tree *f(),tree *l1,tree *l2);
tree *arit_add(tree *s1,tree *s2,tree *s0);
tree *arit_sub(tree *s1,tree *s2,tree *s0);
tree *arit_eq(tree *s1,tree *s2,tree *s0);
void arithsimplify(tree *t);
void formulasimplify(tree *t);
void simplifyarrays(tree *t);
int puretrans(tree *t);
tree *arit_bor(tree *s1,tree *s2,tree *s0);
tree *arit_band(tree *s1,tree *s2,tree *s0);
tree *comblistdist(tree *f(),tree *x1,tree *x2);
tree *arraycond(tree *t,int i);
tree *replacearraybody1construct(tree *t,char *node,int k,int m,int n);
tree *array1var(char *node,int m,int n);
tree *array1varlist(char *node,int m,int n,tree *vd,tree *vnext);
tree *replacearray(tree *body,tree *vars);
void replacearraybody1(tree *t,char *node,int k,int m,int n);
void replacearraybody2(tree *t,char *node,int k,int m,int n);
int ischan(char *node);
void replacechan(tree *body,tree *vars);
void replacechanbody(tree *t,char *node,int j);
void replacechaninit(tree *t,char *node,int j);
tree *combarit_less(tree *x1,tree *x2);
tree *combarit_greater(tree *x1,tree *x2);
int ismarray(char *node);
void marraycount(char *node,int *ma);
void replacemarray(tree *body,tree *vars);
void replacemarraybody(tree *t,char *node,int j,int *ma);
void arit_m2(tree *s2);
tree *comblistmul(tree *x1,tree *x2);
tree *var2tree(char *var,tree *vlist,int bn);
tree *const2tree(char *cnum);
int treelength(tree *t1);
tree *replacevarconst(tree *t,tree *vlist,int bn);
