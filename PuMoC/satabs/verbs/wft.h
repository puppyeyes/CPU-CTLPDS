tree *getvtree(char *node,tree *t);
tree *getvtree_a(char *node,tree *t);
void treeaddx_local(tree *t) ;
void treeaddx(tree *t) ;
void treeaddvc(tree *t,tree *v) ;
tree *checkprog(tree *t);
module *string2module(char *s);
void *stringreplacechar(char *s,char a,char b);
char *stringreplacestring(char *s,char *a,char *b);
char *stringreplacestringfixlength(char *s,char *a,char *b);
tree *merge(module *mm);
void modulewrite(module *mm,FILE *f);
tree *treecopyreplace(tree *spec,module *ms);
void constructt1t2(char *pname,tree *vars,tree *t1,tree *t2);
void treereplacenames(tree *prog,tree *t1,tree *t2);
void treereplacename(char *node,tree *t1,tree *t2,int fl);
void treereplacecleanname(tree *t1);
void treereplacenamearray(char *node,int i,tree *t1,tree *t2);
void cleanstring(char *s);
void stringcompress_a(char *s,char a,char b);
char *stringed(char *s,char *a,char *b);
tree *string2tree_local(char *s,char *op);
tree *string2tree(char *s);
void stringwrite(char *s,FILE *f);
int local_isin(char a,char* s);
void treefree(tree *t) ;
void treereplace(tree *t0,tree *t1) ;
tree *treecompose(char *s,tree *t0,tree *t1) ;
tree *listcompose(tree *t0,tree *t1) ;
tree *listgete(tree *t0) ;
tree *progcompose(tree *t0,tree *t1,tree *t2,tree *t3) ;
tree *treenum(int n);
tree *treecopy(tree *t) ;
void treewrite(tree *t,FILE *f);
int treewrites(tree *t,char *f,int i);
tree *cleanarray(tree *t);
tree *treetraverse(tree *t,int f0(),tree *f1(),tree *f2());
tree *treeconst(int positive);
tree *treeconstaa(int positive);
tree *treeconsttest(tree *t);
void treet0(tree *t,int f0());
void treet1(tree *t,void f1());
void replacesemiand(tree *t);
int isarray(char *node) ;
int mystrcmp(char *a,char *b);
tree *treeadddead_construct(tree *t);
tree *treeadddead(tree *t);
tree *treeaddeq_constructeq(tree *v);
void *treeaddeq_modify(tree *t,tree *v);
void *treeaddeq(tree *t,tree *v);
void cleancolon(tree *t);
void listtraverse(tree *ts,void f());
int vlistcons_count(tree *v);
int vlistcons(tree *v,int p);
tree *constr(tree *v);
