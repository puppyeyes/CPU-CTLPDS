-- automatically generated by CPROVER/SATABS

-- threads: 1

MODULE main

-- variables of the abstract program

VAR b0_LOCK: boolean; -- LOCK

DEFINE runs:=1;

-- program counter
-- 39 is the "terminating" PC

VAR PC: 0..39;

-- initial PC

ASSIGN init(PC):=0;

-- non-deterministic choice

VAR nondet3: boolean;
VAR nondet1: boolean;
VAR nondet0: boolean;
VAR nondet2: boolean;

-- guards

-- file satabs/lock.c line 24 function main
DEFINE guard12:=!nondet1;
-- file satabs/lock.c line 5 function lock
DEFINE guard17:=!nondet0;
-- file satabs/lock.c line 7 function lock
DEFINE guard18:=!b0_LOCK;
-- file satabs/lock.c line 26 function main
DEFINE guard26:=!nondet2;
-- file satabs/lock.c line 30 function main
DEFINE guard28:=!nondet3;
-- file satabs/lock.c line 16 function unlock
DEFINE guard30:=b0_LOCK;
-- file satabs/lock.c line 24 function main
DEFINE guard35:=1;
-- file satabs/lock.c line 37 function main
DEFINE guard36:=1;

-- control flow

ASSIGN next(PC):=case
    !runs: PC;
    PC=0: 1; -- function call
    -- file <built-in> line 23
    PC=1: 2; -- assign
    -- file <built-in> line 25
    PC=2: 3; -- assign
    -- file <built-in> line 26
    PC=3: 4; -- assign
    -- file <built-in> line 27
    PC=4: 5; -- assign
    -- file <built-in> line 36
    PC=5: 6; -- assign
    -- file satabs/lock.c line 2
    PC=6: 7; -- assign
    PC=7: 8; -- end_function
    PC=8: 9; -- function call
    -- file satabs/lock.c line 22 function main
    PC=9: 10; -- decl
    -- file satabs/lock.c line 22 function main
    PC=10: 11; -- assign
    -- file satabs/lock.c line 23 function main
    PC=11: 12; -- decl
    -- file satabs/lock.c line 24 function main
    PC=12: case  -- goto (with guard)
      guard12: 36;
      1: 13;
    esac;
    -- file satabs/lock.c line 26 function main
    PC=13: 14; -- decl
    -- file satabs/lock.c line 26 function main
    PC=14: 15; -- function call
    -- file satabs/lock.c line 5 function lock
    PC=15: 16; -- decl
    -- file satabs/lock.c line 5 function lock
    PC=16: 17; -- assign
    -- file satabs/lock.c line 5 function lock
    PC=17: case  -- goto (with guard)
      guard17: 22;
      1: 18;
    esac;
    -- file satabs/lock.c line 7 function lock
    PC=18: case  -- assume/assert
      guard18: 19;
      1: 18;
    esac;
    -- file satabs/lock.c line 8 function lock
    PC=19: 20; -- assign
    -- file satabs/lock.c line 9 function lock
    PC=20: 21; -- assign
    -- file satabs/lock.c line 9 function lock
    PC=21: 24; -- return
    -- file satabs/lock.c line 11 function lock
    PC=22: 23; -- assign
    -- file satabs/lock.c line 11 function lock
    PC=23: 24; -- return
    -- file satabs/lock.c line 12 function lock
    PC=24: 25; -- end_function
    -- file satabs/lock.c line 26 function main
    PC=25: 26; -- assign
    -- file satabs/lock.c line 26 function main
    PC=26: case  -- goto (with guard)
      guard26: 28;
      1: 27;
    esac;
    -- file satabs/lock.c line 28 function main
    PC=27: 28; -- assign
    -- file satabs/lock.c line 30 function main
    PC=28: case  -- goto (with guard)
      guard28: 34;
      1: 29;
    esac;
    -- file satabs/lock.c line 32 function main
    PC=29: 30; -- function call
    -- file satabs/lock.c line 16 function unlock
    PC=30: case  -- assume/assert
      guard30: 31;
      1: 30;
    esac;
    -- file satabs/lock.c line 17 function unlock
    PC=31: 32; -- assign
    -- file satabs/lock.c line 18 function unlock
    PC=32: 33; -- end_function
    -- file satabs/lock.c line 33 function main
    PC=33: 34; -- assign
    -- file satabs/lock.c line 35 function main
    PC=34: 35; -- assign
    -- file satabs/lock.c line 24 function main
    PC=35: 12; -- goto (without guard)
    -- file satabs/lock.c line 37 function main
    PC=36: 36; -- goto (without guard)
    -- file satabs/lock.c line 37 function main
    PC=37: 38; -- end_function
    PC=38: 39; -- end_function
    -- infinite loop for termination
    PC=39: 39;
  esac;

-- the transition constraints

    -- FROM Predicates:
TRANS (PC=0 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file <built-in> line 23
    -- FROM Predicates:
TRANS (PC=1 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file <built-in> line 25
    -- FROM Predicates:
TRANS (PC=2 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file <built-in> line 26
    -- FROM Predicates:
TRANS (PC=3 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file <built-in> line 27
    -- FROM Predicates:
TRANS (PC=4 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file <built-in> line 36
    -- FROM Predicates:
TRANS (PC=5 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 2
    -- FROM Predicates:
TRANS (PC=6 & runs) -> next(b0_LOCK)=(0)
    -- TO Predicates: b0_LOCK
    -- FROM Predicates:
TRANS (PC=7 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
    -- FROM Predicates:
TRANS (PC=8 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 22 function main
    -- FROM Predicates:
TRANS (PC=9 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 22 function main
    -- FROM Predicates:
TRANS (PC=10 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 23 function main
    -- FROM Predicates:
TRANS (PC=11 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 24 function main
    -- FROM Predicates:
TRANS (PC=12 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 26 function main
    -- FROM Predicates:
TRANS (PC=13 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 26 function main
    -- FROM Predicates:
TRANS (PC=14 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 5 function lock
    -- FROM Predicates:
TRANS (PC=15 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 5 function lock
    -- FROM Predicates:
TRANS (PC=16 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 5 function lock
    -- FROM Predicates:
TRANS (PC=17 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 7 function lock
    -- FROM Predicates:
TRANS (PC=18 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 8 function lock
    -- FROM Predicates:
TRANS (PC=19 & runs) -> next(b0_LOCK)=(1)
    -- TO Predicates: b0_LOCK
-- file satabs/lock.c line 9 function lock
    -- FROM Predicates:
TRANS (PC=20 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 9 function lock
    -- FROM Predicates:
TRANS (PC=21 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 11 function lock
    -- FROM Predicates:
TRANS (PC=22 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 11 function lock
    -- FROM Predicates:
TRANS (PC=23 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 12 function lock
    -- FROM Predicates:
TRANS (PC=24 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 26 function main
    -- FROM Predicates:
TRANS (PC=25 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 26 function main
    -- FROM Predicates:
TRANS (PC=26 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 28 function main
    -- FROM Predicates:
TRANS (PC=27 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 30 function main
    -- FROM Predicates:
TRANS (PC=28 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 32 function main
    -- FROM Predicates:
TRANS (PC=29 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 16 function unlock
    -- FROM Predicates:
TRANS (PC=30 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 17 function unlock
    -- FROM Predicates:
TRANS (PC=31 & runs) -> next(b0_LOCK)=(0)
    -- TO Predicates: b0_LOCK
-- file satabs/lock.c line 18 function unlock
    -- FROM Predicates:
TRANS (PC=32 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 33 function main
    -- FROM Predicates:
TRANS (PC=33 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 35 function main
    -- FROM Predicates:
TRANS (PC=34 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 24 function main
    -- FROM Predicates:
TRANS (PC=35 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 37 function main
    -- FROM Predicates:
TRANS (PC=36 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- file satabs/lock.c line 37 function main
    -- FROM Predicates:
TRANS (PC=37 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
    -- FROM Predicates:
TRANS (PC=38 & runs) -> next(b0_LOCK)=b0_LOCK
    -- TO Predicates:
-- termination
TRANS (PC=39 & runs) -> next(b0_LOCK)=b0_LOCK

-- the specification

-- file satabs/lock.c line 7 function lock
SPEC AG ((PC=18 & runs) -> guard18)
-- file satabs/lock.c line 16 function unlock
SPEC AG ((PC=30 & runs) -> guard30)

